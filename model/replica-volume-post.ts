/* tslint:disable */
/* eslint-disable */
/**
 * VM Auto Scaling API
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified \'scale-in\' and \'scale-out\' actions are performed when the corresponding thresholds are reached.
 *
 * The version of the OpenAPI document: 1-SDK.1
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { BusType } from './bus-type';
import { VolumeHwType } from './volume-hw-type';

/**
 * 
 * @export
 * @interface ReplicaVolumePost
 */
export interface ReplicaVolumePost {

    /**
     * The image installed on the disk. Currently, only the UUID of the image is supported.  >Note that either \'image\' or \'imageAlias\' must be specified, but not both.
     * @type {string}
     * @memberof ReplicaVolumePost
     */
    image?: string | null;

    /**
     * The image installed on the volume. Must be an \'imageAlias\' as specified via the images API. Note that one of \'image\' or \'imageAlias\' must be set, but not both.
     * @type {string}
     * @memberof ReplicaVolumePost
     */
    imageAlias?: string | null;

    /**
     * The replica volume name.
     * @type {string}
     * @memberof ReplicaVolumePost
     */
    name: string;

    /**
     * The size of this replica volume in GB.
     * @type {number}
     * @memberof ReplicaVolumePost
     */
    size: number;

    /**
     * The SSH keys of this volume.
     * @type {Array<string>}
     * @memberof ReplicaVolumePost
     */
    sshKeys?: Array<string>;

    /**
     * 
     * @type {VolumeHwType}
     * @memberof ReplicaVolumePost
     */
    type: VolumeHwType;

    /**
     * The user data (Cloud Init) for this replica volume.
     * @type {string}
     * @memberof ReplicaVolumePost
     */
    userData?: string;

    /**
     * 
     * @type {BusType}
     * @memberof ReplicaVolumePost
     */
    bus?: BusType;

    /**
     * The ID of the backup unit that the user has access to. The property is immutable and is only allowed to be set on creation of a new a volume. It is mandatory to provide either \'public image\' or \'imageAlias\' in conjunction with this property.
     * @type {string}
     * @memberof ReplicaVolumePost
     */
    backupunitId?: string;

    /**
     * Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the voluem as boot volume. Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
     * @type {string}
     * @memberof ReplicaVolumePost
     */
    bootOrder: ReplicaVolumePostBootOrderEnum;

    /**
     * The image password for this replica volume.
     * @type {string}
     * @memberof ReplicaVolumePost
     */
    imagePassword?: string;
}











/**
    * @export
    * @enum {string}
    */
export enum ReplicaVolumePostBootOrderEnum {
    Auto = 'AUTO',
    None = 'NONE',
    Primary = 'PRIMARY'
}




