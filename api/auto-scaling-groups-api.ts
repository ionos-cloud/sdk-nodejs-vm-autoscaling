/* tslint:disable */
/* eslint-disable */
/**
 * VM Auto Scaling API
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified \'scale-in\' and \'scale-out\' actions are performed when the corresponding thresholds are reached.
 *
 * The version of the OpenAPI document: 1-SDK.1
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { Action } from '../model';
// @ts-ignore
import { ActionCollection } from '../model';
// @ts-ignore
import { Error401 } from '../model';
// @ts-ignore
import { Error404 } from '../model';
// @ts-ignore
import { ErrorAuthorize } from '../model';
// @ts-ignore
import { ErrorGroupValidate } from '../model';
// @ts-ignore
import { Group } from '../model';
// @ts-ignore
import { GroupCollection } from '../model';
// @ts-ignore
import { GroupPost } from '../model';
// @ts-ignore
import { GroupPostResponse } from '../model';
// @ts-ignore
import { GroupPut } from '../model';
// @ts-ignore
import { ParseError } from '../model';
// @ts-ignore
import { Server } from '../model';
// @ts-ignore
import { ServerCollection } from '../model';
/**
 * AutoScalingGroupsApi - axios parameter creator
 * @export
 */
export const AutoScalingGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the details of a scaling action specified by its ID. This operation returns metadata, properties, and the current status, for the specified scaling action
         * @summary Get Scaling Action Details by ID
         * @param {string} actionId 
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsActionsFindById: async (actionId: string, groupId: string, depth?: number, options: any = {}): Promise<RequestArgs> => {
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling groupsActionsFindById.');
            }
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupsActionsFindById.');
            }
            const localVarPath = `/groups/{groupId}/actions/{actionId}`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)))
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the list of the last Auto Scaling actions or jobs performed by the VM Auto Scaling.The actions are specified by its ID. Only the last 10 actions are available
         * @summary Get Scaling Actions
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsActionsGet: async (groupId: string, depth?: number, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupsActionsGet.');
            }
            const localVarPath = `/groups/{groupId}/actions`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((orderBy === undefined) && (configuration !== undefined)) {
                orderBy = configuration.getDefaultParamValue('orderBy');
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the VM Auto Scaling Group specified by its ID.  >Deleting the associated servers and disks is currently not implemented.
         * @summary Delete a VM Auto Scaling Group by ID
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDelete: async (groupId: string, options: any = {}): Promise<RequestArgs> => {
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupsDelete.');
            }
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the VM Auto Scaling Group specified by its ID including the details.
         * @summary Get an Auto Scaling by ID
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsFindById: async (groupId: string, depth?: number, options: any = {}): Promise<RequestArgs> => {
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupsFindById.');
            }
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all VM Auto Scaling Groups of your account.
         * @summary Get VM Auto Scaling Groups
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: async (depth?: number, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((orderBy === undefined) && (configuration !== undefined)) {
                orderBy = configuration.getDefaultParamValue('orderBy');
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a VM Auto Scaling Group.   > Note that creating a group triggers the creation of two monitoring alarms for \'Scale-In\' and \'Scale-Out\' operations according to the \'Policy\' settings.
         * @summary Create a VM Auto Scaling Group
         * @param {GroupPost} groupPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: async (groupPost: GroupPost, options: any = {}): Promise<RequestArgs> => {
            if (groupPost === null || groupPost === undefined) {
                throw new RequiredError('groupPost','Required parameter groupPost was null or undefined when calling groupsPost.');
            }
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof groupPost !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(groupPost !== undefined ? groupPost : {})
                : (groupPost || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the VM Auto Scaling Group specified by its ID. The IDs assigned by the system when the resource is created, such as \'properties.datacenter.id\' and \'backupunitId\', are immutable and cannot be updated.
         * @summary Update a VM Auto Scaling Group by ID
         * @param {string} groupId 
         * @param {GroupPut} groupPut 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPut: async (groupId: string, groupPut: GroupPut, options: any = {}): Promise<RequestArgs> => {
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupsPut.');
            }
            if (groupPut === null || groupPut === undefined) {
                throw new RequiredError('groupPut','Required parameter groupPut was null or undefined when calling groupsPut.');
            }
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof groupPut !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(groupPut !== undefined ? groupPut : {})
                : (groupPut || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the properties of the server specified by its ID.  >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
         * @summary Get VM Auto Scaling Group Server by ID
         * @param {string} groupId 
         * @param {string} serverId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsServersFindById: async (groupId: string, serverId: string, depth?: number, options: any = {}): Promise<RequestArgs> => {
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupsServersFindById.');
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling groupsServersFindById.');
            }
            const localVarPath = `/groups/{groupId}/servers/{serverId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all servers associated with the VM Auto Scaling Group specified by its ID.   >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
         * @summary Get VM Auto Scaling Group Servers
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsServersGet: async (groupId: string, depth?: number, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupsServersGet.');
            }
            const localVarPath = `/groups/{groupId}/servers`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((orderBy === undefined) && (configuration !== undefined)) {
                orderBy = configuration.getDefaultParamValue('orderBy');
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutoScalingGroupsApi - functional programming interface
 * @export
 */
export const AutoScalingGroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves the details of a scaling action specified by its ID. This operation returns metadata, properties, and the current status, for the specified scaling action
         * @summary Get Scaling Action Details by ID
         * @param {string} actionId 
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsActionsFindById(actionId: string, groupId: string, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Action>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsActionsFindById(actionId, groupId, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves the list of the last Auto Scaling actions or jobs performed by the VM Auto Scaling.The actions are specified by its ID. Only the last 10 actions are available
         * @summary Get Scaling Actions
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsActionsGet(groupId: string, depth?: number, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionCollection>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsActionsGet(groupId, depth, orderBy, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Deletes the VM Auto Scaling Group specified by its ID.  >Deleting the associated servers and disks is currently not implemented.
         * @summary Delete a VM Auto Scaling Group by ID
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsDelete(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsDelete(groupId, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves the VM Auto Scaling Group specified by its ID including the details.
         * @summary Get an Auto Scaling by ID
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsFindById(groupId: string, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsFindById(groupId, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Lists all VM Auto Scaling Groups of your account.
         * @summary Get VM Auto Scaling Groups
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGet(depth?: number, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupCollection>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsGet(depth, orderBy, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Creates a VM Auto Scaling Group.   > Note that creating a group triggers the creation of two monitoring alarms for \'Scale-In\' and \'Scale-Out\' operations according to the \'Policy\' settings.
         * @summary Create a VM Auto Scaling Group
         * @param {GroupPost} groupPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsPost(groupPost: GroupPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPostResponse>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsPost(groupPost, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Updates the VM Auto Scaling Group specified by its ID. The IDs assigned by the system when the resource is created, such as \'properties.datacenter.id\' and \'backupunitId\', are immutable and cannot be updated.
         * @summary Update a VM Auto Scaling Group by ID
         * @param {string} groupId 
         * @param {GroupPut} groupPut 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsPut(groupId: string, groupPut: GroupPut, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsPut(groupId, groupPut, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves the properties of the server specified by its ID.  >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
         * @summary Get VM Auto Scaling Group Server by ID
         * @param {string} groupId 
         * @param {string} serverId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsServersFindById(groupId: string, serverId: string, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Server>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsServersFindById(groupId, serverId, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves all servers associated with the VM Auto Scaling Group specified by its ID.   >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
         * @summary Get VM Auto Scaling Group Servers
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsServersGet(groupId: string, depth?: number, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerCollection>> {
            const axiosArgs = await AutoScalingGroupsApiAxiosParamCreator(configuration).groupsServersGet(groupId, depth, orderBy, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * AutoScalingGroupsApi - factory interface
 * @export
 */
export const AutoScalingGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves the details of a scaling action specified by its ID. This operation returns metadata, properties, and the current status, for the specified scaling action
         * @summary Get Scaling Action Details by ID
         * @param {string} actionId 
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsActionsFindById(actionId: string, groupId: string, depth?: number, options?: any): AxiosPromise<Action> {
            return AutoScalingGroupsApiFp(configuration).groupsActionsFindById(actionId, groupId, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the list of the last Auto Scaling actions or jobs performed by the VM Auto Scaling.The actions are specified by its ID. Only the last 10 actions are available
         * @summary Get Scaling Actions
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsActionsGet(groupId: string, depth?: number, orderBy?: string, options?: any): AxiosPromise<ActionCollection> {
            return AutoScalingGroupsApiFp(configuration).groupsActionsGet(groupId, depth, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the VM Auto Scaling Group specified by its ID.  >Deleting the associated servers and disks is currently not implemented.
         * @summary Delete a VM Auto Scaling Group by ID
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDelete(groupId: string, options?: any): AxiosPromise<void> {
            return AutoScalingGroupsApiFp(configuration).groupsDelete(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the VM Auto Scaling Group specified by its ID including the details.
         * @summary Get an Auto Scaling by ID
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsFindById(groupId: string, depth?: number, options?: any): AxiosPromise<Group> {
            return AutoScalingGroupsApiFp(configuration).groupsFindById(groupId, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all VM Auto Scaling Groups of your account.
         * @summary Get VM Auto Scaling Groups
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(depth?: number, orderBy?: string, options?: any): AxiosPromise<GroupCollection> {
            return AutoScalingGroupsApiFp(configuration).groupsGet(depth, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a VM Auto Scaling Group.   > Note that creating a group triggers the creation of two monitoring alarms for \'Scale-In\' and \'Scale-Out\' operations according to the \'Policy\' settings.
         * @summary Create a VM Auto Scaling Group
         * @param {GroupPost} groupPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(groupPost: GroupPost, options?: any): AxiosPromise<GroupPostResponse> {
            return AutoScalingGroupsApiFp(configuration).groupsPost(groupPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the VM Auto Scaling Group specified by its ID. The IDs assigned by the system when the resource is created, such as \'properties.datacenter.id\' and \'backupunitId\', are immutable and cannot be updated.
         * @summary Update a VM Auto Scaling Group by ID
         * @param {string} groupId 
         * @param {GroupPut} groupPut 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPut(groupId: string, groupPut: GroupPut, options?: any): AxiosPromise<Group> {
            return AutoScalingGroupsApiFp(configuration).groupsPut(groupId, groupPut, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the properties of the server specified by its ID.  >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
         * @summary Get VM Auto Scaling Group Server by ID
         * @param {string} groupId 
         * @param {string} serverId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsServersFindById(groupId: string, serverId: string, depth?: number, options?: any): AxiosPromise<Server> {
            return AutoScalingGroupsApiFp(configuration).groupsServersFindById(groupId, serverId, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all servers associated with the VM Auto Scaling Group specified by its ID.   >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
         * @summary Get VM Auto Scaling Group Servers
         * @param {string} groupId 
         * @param {number} [depth] With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
         * @param {string} [orderBy] Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsServersGet(groupId: string, depth?: number, orderBy?: string, options?: any): AxiosPromise<ServerCollection> {
            return AutoScalingGroupsApiFp(configuration).groupsServersGet(groupId, depth, orderBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for groupsActionsFindById operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsActionsFindByIdRequest
 */
export interface AutoScalingGroupsApiGroupsActionsFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsActionsFindById
     */
    readonly actionId: string

    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsActionsFindById
     */
    readonly groupId: string

    /**
     * With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
     * @type {number}
     * @memberof AutoScalingGroupsApiGroupsActionsFindById
     */
    readonly depth?: number
}

/**
 * Request parameters for groupsActionsGet operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsActionsGetRequest
 */
export interface AutoScalingGroupsApiGroupsActionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsActionsGet
     */
    readonly groupId: string

    /**
     * With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
     * @type {number}
     * @memberof AutoScalingGroupsApiGroupsActionsGet
     */
    readonly depth?: number

    /**
     * Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsActionsGet
     */
    readonly orderBy?: string
}

/**
 * Request parameters for groupsDelete operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsDeleteRequest
 */
export interface AutoScalingGroupsApiGroupsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsDelete
     */
    readonly groupId: string
}

/**
 * Request parameters for groupsFindById operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsFindByIdRequest
 */
export interface AutoScalingGroupsApiGroupsFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsFindById
     */
    readonly groupId: string

    /**
     * With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
     * @type {number}
     * @memberof AutoScalingGroupsApiGroupsFindById
     */
    readonly depth?: number
}

/**
 * Request parameters for groupsGet operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsGetRequest
 */
export interface AutoScalingGroupsApiGroupsGetRequest {
    /**
     * With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
     * @type {number}
     * @memberof AutoScalingGroupsApiGroupsGet
     */
    readonly depth?: number

    /**
     * Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsGet
     */
    readonly orderBy?: string
}

/**
 * Request parameters for groupsPost operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsPostRequest
 */
export interface AutoScalingGroupsApiGroupsPostRequest {
    /**
     * 
     * @type {GroupPost}
     * @memberof AutoScalingGroupsApiGroupsPost
     */
    readonly groupPost: GroupPost
}

/**
 * Request parameters for groupsPut operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsPutRequest
 */
export interface AutoScalingGroupsApiGroupsPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsPut
     */
    readonly groupId: string

    /**
     * 
     * @type {GroupPut}
     * @memberof AutoScalingGroupsApiGroupsPut
     */
    readonly groupPut: GroupPut
}

/**
 * Request parameters for groupsServersFindById operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsServersFindByIdRequest
 */
export interface AutoScalingGroupsApiGroupsServersFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsServersFindById
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsServersFindById
     */
    readonly serverId: string

    /**
     * With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
     * @type {number}
     * @memberof AutoScalingGroupsApiGroupsServersFindById
     */
    readonly depth?: number
}

/**
 * Request parameters for groupsServersGet operation in AutoScalingGroupsApi.
 * @export
 * @interface AutoScalingGroupsApiGroupsServersGetRequest
 */
export interface AutoScalingGroupsApiGroupsServersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsServersGet
     */
    readonly groupId: string

    /**
     * With this parameter, you control the level of detail of the response objects:    - &#x60;&#x60;0&#x60;&#x60;: Only direct properties are included; children (such as executions or transitions) are not considered.    - &#x60;&#x60;1&#x60;&#x60;: Direct properties and children references are included.    - &#x60;&#x60;2&#x60;&#x60;: Direct properties and children properties are included.    - &#x60;&#x60;3&#x60;&#x60;: Direct properties and children properties and children\&#39;s children are included.    - etc.  
     * @type {number}
     * @memberof AutoScalingGroupsApiGroupsServersGet
     */
    readonly depth?: number

    /**
     * Use this parameter to specify by which the returned list should be sorted. Valid values are: &#x60;&#x60;createdDate&#x60;&#x60; and &#x60;&#x60;lastModifiedDate&#x60;&#x60;.
     * @type {string}
     * @memberof AutoScalingGroupsApiGroupsServersGet
     */
    readonly orderBy?: string
}

/**
 * AutoScalingGroupsApi - object-oriented interface
 * @export
 * @class AutoScalingGroupsApi
 * @extends {BaseAPI}
 */
export class AutoScalingGroupsApi extends BaseAPI {
    /**
     * Retrieves the details of a scaling action specified by its ID. This operation returns metadata, properties, and the current status, for the specified scaling action
     * @summary Get Scaling Action Details by ID
     * @param {AutoScalingGroupsApiGroupsActionsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsActionsFindById(requestParameters: AutoScalingGroupsApiGroupsActionsFindByIdRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsActionsFindById(requestParameters.actionId, requestParameters.groupId, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the list of the last Auto Scaling actions or jobs performed by the VM Auto Scaling.The actions are specified by its ID. Only the last 10 actions are available
     * @summary Get Scaling Actions
     * @param {AutoScalingGroupsApiGroupsActionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsActionsGet(requestParameters: AutoScalingGroupsApiGroupsActionsGetRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsActionsGet(requestParameters.groupId, requestParameters.depth, requestParameters.orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the VM Auto Scaling Group specified by its ID.  >Deleting the associated servers and disks is currently not implemented.
     * @summary Delete a VM Auto Scaling Group by ID
     * @param {AutoScalingGroupsApiGroupsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsDelete(requestParameters: AutoScalingGroupsApiGroupsDeleteRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsDelete(requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the VM Auto Scaling Group specified by its ID including the details.
     * @summary Get an Auto Scaling by ID
     * @param {AutoScalingGroupsApiGroupsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsFindById(requestParameters: AutoScalingGroupsApiGroupsFindByIdRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsFindById(requestParameters.groupId, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all VM Auto Scaling Groups of your account.
     * @summary Get VM Auto Scaling Groups
     * @param {AutoScalingGroupsApiGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsGet(requestParameters: AutoScalingGroupsApiGroupsGetRequest = {}, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsGet(requestParameters.depth, requestParameters.orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a VM Auto Scaling Group.   > Note that creating a group triggers the creation of two monitoring alarms for \'Scale-In\' and \'Scale-Out\' operations according to the \'Policy\' settings.
     * @summary Create a VM Auto Scaling Group
     * @param {AutoScalingGroupsApiGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsPost(requestParameters: AutoScalingGroupsApiGroupsPostRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsPost(requestParameters.groupPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the VM Auto Scaling Group specified by its ID. The IDs assigned by the system when the resource is created, such as \'properties.datacenter.id\' and \'backupunitId\', are immutable and cannot be updated.
     * @summary Update a VM Auto Scaling Group by ID
     * @param {AutoScalingGroupsApiGroupsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsPut(requestParameters: AutoScalingGroupsApiGroupsPutRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsPut(requestParameters.groupId, requestParameters.groupPut, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the properties of the server specified by its ID.  >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
     * @summary Get VM Auto Scaling Group Server by ID
     * @param {AutoScalingGroupsApiGroupsServersFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsServersFindById(requestParameters: AutoScalingGroupsApiGroupsServersFindByIdRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsServersFindById(requestParameters.groupId, requestParameters.serverId, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all servers associated with the VM Auto Scaling Group specified by its ID.   >Note that the server IDs of the VM Auto Scaling Groups are different from and do not match the VM server IDs in the data center.
     * @summary Get VM Auto Scaling Group Servers
     * @param {AutoScalingGroupsApiGroupsServersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoScalingGroupsApi
     */
    public groupsServersGet(requestParameters: AutoScalingGroupsApiGroupsServersGetRequest, options?: any) {
        return AutoScalingGroupsApiFp(this.configuration).groupsServersGet(requestParameters.groupId, requestParameters.depth, requestParameters.orderBy, options).then((request) => request(this.axios, this.basePath));
    }
}
