/* tslint:disable */
/* eslint-disable */
/**
 * VM Auto Scaling API
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified \'scale-in\' and \'scale-out\' actions are performed when the corresponding thresholds are reached.
 *
 * The version of the OpenAPI document: 1-SDK.1
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface NicFirewallRule
 */
export interface NicFirewallRule {

    /**
     * The name of the firewall rule.
     * @type {string}
     * @memberof NicFirewallRule
     */
    name?: string | null;

    /**
     * The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
     * @type {string}
     * @memberof NicFirewallRule
     */
    protocol: NicFirewallRuleProtocolEnum;

    /**
     * Only traffic originating from the respective MAC address is permitted. Valid format: \'aa:bb:cc:dd:ee:ff\'. The value \'null\' allows traffic from any MAC address.
     * @type {string}
     * @memberof NicFirewallRule
     */
    sourceMac?: string | null;

    /**
     * Only traffic originating from the respective IPv4 address is permitted. The value \'null\' allows traffic from any IP address.
     * @type {string}
     * @memberof NicFirewallRule
     */
    sourceIp?: string | null;

    /**
     * If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value \'null\' allows traffic to any target IP address.
     * @type {string}
     * @memberof NicFirewallRule
     */
    targetIp?: string | null;

    /**
     * Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value \'null\'\' allows all codes.
     * @type {number}
     * @memberof NicFirewallRule
     */
    icmpCode?: number | null;

    /**
     * Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value \'null\' allows all types.
     * @type {number}
     * @memberof NicFirewallRule
     */
    icmpType?: number | null;

    /**
     * Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value \'null\' for \'portRangeStart\' and \'portRangeEnd\' allows all ports.
     * @type {number}
     * @memberof NicFirewallRule
     */
    portRangeStart?: number | null;

    /**
     * Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value \'null\' for \'portRangeStart\' and \'portRangeEnd\' allows all ports.
     * @type {number}
     * @memberof NicFirewallRule
     */
    portRangeEnd?: number | null;

    /**
     * The firewall rule type. If not specified, the default value \'INGRESS\' is used.
     * @type {string}
     * @memberof NicFirewallRule
     */
    type?: NicFirewallRuleTypeEnum;
}



/**
    * @export
    * @enum {string}
    */
export enum NicFirewallRuleProtocolEnum {
    Tcp = 'TCP',
    Udp = 'UDP',
    Icmp = 'ICMP',
    Any = 'ANY'
}








/**
    * @export
    * @enum {string}
    */
export enum NicFirewallRuleTypeEnum {
    Ingress = 'INGRESS',
    Egress = 'EGRESS'
}



